#include <boost/numeric/ublas/matrix.hpp>
#include <boost/numeric/ublas/vector.hpp>
#include <sys/wait.h>
#include "cspace.h"
#include "simulator.h"


boost::numeric::ublas::matrix<double> Gantry::get_accel_matrix_A(const cspace::state_t &x) {
    boost::numeric::ublas::matrix<double> A(5,5);
    A(0,0) = 0.71111111111111114*pow(x[4], 2) + 0.58666666666666667*x[4] + 11.259585151882458;
    A(0,1) = 0.328014848117539 - 0.71111111111111114*pow(x[4], 2);
    A(0,2) = 0.71111111111111114*pow(x[4], 2) + 0.58666666666666667*x[4] + 3.0009851518824608;
    A(0,3) = 0.328014848117539 - 0.71111111111111114*pow(x[4], 2);
    A(0,4) = 0.29333333333333333*(2.4242424242424243*x[4] + 1.0)*(x[0] - x[1] + x[2] - x[3]) - 0.0096800000000000011;
    A(1,0) = 0.328014848117539 - 0.71111111111111114*pow(x[4], 2);
    A(1,1) = 0.71111111111111114*pow(x[4], 2) - 0.58666666666666667*x[4] + 10.370485151882459;
    A(1,2) = 0.328014848117539 - 0.71111111111111114*pow(x[4], 2);
    A(1,3) = 0.71111111111111114*pow(x[4], 2) - 0.58666666666666667*x[4] + 1.431185151882461;
    A(1,4) = -0.29333333333333333*(2.4242424242424243*x[4] - 1.0)*(x[0] - x[1] + x[2] - x[3]) + 0.0096800000000000011;
    A(2,0) = 0.71111111111111114*pow(x[4], 2) + 0.58666666666666667*x[4] + 3.0009851518824608;
    A(2,1) = 0.328014848117539 - 0.71111111111111114*pow(x[4], 2);
    A(2,2) = 0.71111111111111114*pow(x[4], 2) + 0.58666666666666667*x[4] + 3.0009851518824608;
    A(2,3) = 0.328014848117539 - 0.71111111111111114*pow(x[4], 2);
    A(2,4) = 0.29333333333333333*(2.4242424242424243*x[4] + 1.0)*(x[0] - x[1] + x[2] - x[3]) - 0.0096800000000000011;
    A(3,0) = 0.328014848117539 - 0.71111111111111114*pow(x[4], 2);
    A(3,1) = 0.71111111111111114*pow(x[4], 2) - 0.58666666666666667*x[4] + 1.431185151882461;
    A(3,2) = 0.328014848117539 - 0.71111111111111114*pow(x[4], 2);
    A(3,3) = 0.71111111111111114*pow(x[4], 2) - 0.58666666666666667*x[4] + 1.431185151882461;
    A(3,4) = -0.29333333333333333*(2.4242424242424243*x[4] - 1.0)*(x[0] - x[1] + x[2] - x[3]) + 0.0096800000000000011;
    A(4,0) = 0.58666666666666667*(1.2121212121212122*x[4] + 0.5)*(x[0] - x[1] + x[2] - x[3]) - 0.0096800000000000011;
    A(4,1) = -0.58666666666666667*(1.2121212121212122*x[4] - 0.5)*(x[0] - x[1] + x[2] - x[3]) + 0.0096800000000000011;
    A(4,2) = 0.58666666666666667*(1.2121212121212122*x[4] + 0.5)*(x[0] - x[1] + x[2] - x[3]) - 0.0096800000000000011;
    A(4,3) = -0.58666666666666667*(1.2121212121212122*x[4] - 0.5)*(x[0] - x[1] + x[2] - x[3]) + 0.0096800000000000011;
    A(4,4) = 0.71111111111111114*pow(x[0] - x[1] + x[2] - x[3], 2) + 0.48399999999999999;
    return A;
}

boost::numeric::ublas::vector<double> Gantry::get_accel_vector_B(const cspace::state_t &x, const cspace::input_t &u) {
    boost::numeric::ublas::vector<double> b(5);
    const double Qmmr1 = u[2];
    const double Qmmf1 = u[3];
    const double Qmb1 = u[4];
    b(0) = -10704.552617079891*x[0] - 15.892135812672176*x[5] + 4704.3526170798905*x[1] + 13.529035812672177*x[6] - 4704.3526170798905*x[2] - 13.529035812672177*x[7] + 4704.3526170798905*x[3] + 13.529035812672177*x[8] - 0.58666666666666667*x[9]*(2.4242424242424243*x[4] + 1.0)*(x[5] - x[6] + x[7] - x[8]);
    b(1) = 4704.3526170798905*x[0] + 13.529035812672177*x[5] - 10790.65261707989*x[1] - 15.181435812672177*x[6] + 4704.3526170798905*x[2] + 13.529035812672177*x[7] - 4704.3526170798905*x[3] - 13.529035812672177*x[8] + 0.58666666666666667*x[9]*(2.4242424242424243*x[4] - 1.0)*(x[5] - x[6] + x[7] - x[8]);
    b(2) = Qmmr1 - 4704.3526170798905*x[0] - 13.529035812672177*x[5] + 4704.3526170798905*x[1] + 13.529035812672177*x[6] - 4704.3526170798905*x[2] - 13.529035812672177*x[7] + 4704.3526170798905*x[3] + 13.529035812672177*x[8] - 0.58666666666666667*x[9]*(2.4242424242424243*x[4] + 1.0)*(x[5] - x[6] + x[7] - x[8]);
    b(3) = Qmmf1 + 4704.3526170798905*x[0] + 13.529035812672177*x[5] - 4704.3526170798905*x[1] - 13.529035812672177*x[6] + 4704.3526170798905*x[2] + 13.529035812672177*x[7] - 4704.3526170798905*x[3] - 13.529035812672177*x[8] + 0.58666666666666667*x[9]*(2.4242424242424243*x[4] - 1.0)*(x[5] - x[6] + x[7] - x[8]);
    b(4) = Qmb1 - 1.4222222222222223*x[9]*(x[0] - x[1] + x[2] - x[3])*(x[5] - x[6] + x[7] - x[8]);
    return b;
}
